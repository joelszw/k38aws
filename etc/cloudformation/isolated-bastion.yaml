#########################################################################
#      Copyright (C) 2020        Sebastian Francisco Colomar Bauza      #
#      SPDX-License-Identifier:  GPL-2.0-only                           #
#########################################################################

---

AWSTemplateFormatVersion: "2010-09-09"

Description: This template creates a new VPC and deploys a HA cluster in AWS

#============================================================
# UI Definition
#============================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Cluster Common Configuration
        Parameters:
          - BranchAWS
          - NodeInstallUrlPath
          - NodeInstallUrlFileMaster
      -
        Label:
          default: Cluster Master Configuration
        Parameters:
          - InstanceMasterImageId
          - InstanceMasterInstanceType
      -
        Label:
          default: Network Configuration
        Parameters:
          - PrivateIpAddressInstanceMaster1
          - SubnetCidrBlockPublic1
          - VPCCidrBlock
          
    ParameterLabels:
      BranchAWS:
        default: The branch of the git repo to download the script for the common install of the nodes
      InstanceMasterImageId:
        default: AMI to use for Cluster Master Instances
      InstanceMasterInstanceType:
        default: Cluster Master Instance Size
      NodeInstallUrlPath:
        default: The URL path to download the script for the common install of the nodes
      NodeInstallUrlFileMaster:
        default: The name of the script for the common install of the Master nodes
      PrivateIpAddressInstanceMaster1:
        default: The private IP address for Master 1
      SubnetCidrBlockPublic1:
        default: Public Subnet 1 CIDR
      VPCCidrBlock:
        default: VPC CIDR
                
Parameters:

  BranchAWS:
    Default: "main"
    Description: >
      The branch of the git repo to download the script for the common install of the nodes.
    Type: String

  InstanceMasterImageId:
#    Default: 'ami-0db0b3ab7df22e366' #MUMBAI #UBUNTU18
#    Default: 'ami-026f33d38b6410e30' #MUMBAI #CENTOS7
#    Default: 'ami-003b12a9a1ee83922' #MUMBAI #RHEL7
#    Default: 'ami-0a9d27a9f4f5c0efc' #MUMBAI #RHEL8
    Default: ami-05afd67c4a44cc983 #MUMBAI AMAZON
    Description: >
      Select AMI to use for the Cluster Master instances. 
      When it's left blank, the default AMI for your AWS region will be used. 
      When setting an AMI, it must be available in your current region.
    Type: String
    
  InstanceMasterInstanceType:
    Default: 't3a.small'
    Description: >
      Select Amazon EC2 instance type for the Cluster Master instances.
    Type: String
    
  NodeInstallUrlPath:
    Default: "https://github.com/sebastian-colomar/aws"
    Description: >
      The URL path to download the script for the common install of the nodes.
    Type: String
    
  NodeInstallUrlFileMaster:
    Default: bin/install-ssm-rhel.sh
    Description: >
      The name of the script for the common install of the Master nodes.
    Type: String
    
  PrivateIpAddressInstanceMaster1:
    Default: 10.168.2.100
    Description: >
      The private IP address for Master 1.
    Type: String
    
  SubnetCidrBlockPublic1:
    Default: 10.168.2.0/24
    Description: >
      CIDR block for public (DMZ) subnet located in Availability Zone 1. 
      All resources located on this subnet are provided an IP within this address block. 
    Type: String
    
  VPCCidrBlock:
    Default: 10.168.0.0/16
    Description: >
      CIDR block for the VPC. All the subnets and resources will have an IP within this address block.
    Type: String
    
#============================================================
# Resources
#============================================================
Resources:

  EIPMaster1:
    Properties:
      Domain: vpc
      InstanceId: !Ref InstanceMaster1
    Type: AWS::EC2::EIP

  InstanceMaster1:
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceMasterImageId
      InstanceType: !Ref InstanceMasterInstanceType
      PrivateIpAddress: !Ref PrivateIpAddressInstanceMaster1
      SecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
      SubnetId: !Ref SubnetPublic1
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            sudo yum install -y docker git
            sudo systemctl enable docker --now
            #git clone --single-branch --branch ${BranchAWS} ${NodeInstallUrlPath} GitRepository
            #chmod +x GitRepository/${NodeInstallUrlFileMaster}
            #./GitRepository/${NodeInstallUrlFileMaster}
            #rm --force --recursive GitRepository
    Type: AWS::EC2::Instance
            
  InstanceProfile:
    Properties:
      Roles: [!Ref Role]
    Type: AWS::IAM::InstanceProfile

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  NatGateway1:
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref SubnetPublic1
    Type: AWS::EC2::NatGateway
    
  Role:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
    Type: AWS::IAM::Role

  RoutePublic:
    DependsOn: [VPCGatewayAttachment]
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic
    Type: AWS::EC2::Route

  RouteTablePublic:
    Properties:
      VpcId: !Ref VPC
    Type: AWS::EC2::RouteTable
      
  SubnetPublic1:
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPublic1
      VpcId: !Ref VPC
    Type: AWS::EC2::Subnet

  SubnetRouteTableAssociationPublic1:
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic1
    Type: AWS::EC2::SubnetRouteTableAssociation

  VPC:
    Properties:
      CidrBlock: !Ref VPCCidrBlock
    Type: "AWS::EC2::VPC"

  VPCGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Type: AWS::EC2::VPCGatewayAttachment
